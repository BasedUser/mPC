set COPYRIGHT "ukern-ucm-ccp – a CCP for ukern UCM\n© 2025 camelStyleUser. Released under GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html).\nThis program is provided without any warranty."
set SOURCELINK "https://github.com/BasedUser/mPC"
loop:
set fsdpid 4
read c cell1 0
jump ident equal c -1
jump stop equal c -2
jump start equal c -3
jump valid equal c -5
jump error equal c -4
jump code equal e 1
jump loop always
ident:
write 0 cell1 1
write 0x74657374 cell1 2#identify as test, not like it matters that much
write 0 cell1 3
write 0 cell1 0
jump loop always
stop:
write 0 cell1 0
set e 0
jump loop always
start:
set disk 0
write 0 cell1 0
set e 1
set stage 0
set metastage 1
set bufptr 0
write bufptr bank1 511
jump loop always
valid:
write 0 cell1 0
jump stage2 greaterThanEq stage 2
read v cell1 1
jump nomoreipc equal v -1
set stage 2
write 3 cell1 0
jump loop always
stage2:
jump stage3 greaterThanEq stage 3
set handlingcmdspawn 0
jump handleinit equal metastage 1
jump handleanyc equal metastage 2
jump handlechar equal metastage 3
jump handletermd equal metastage 4
jump handlewaitfortaskend equal metastage 100
jump exeloadergetfile equal metastage 101
jump exeloaderreadfile equal metastage 102
jump exeloaderwritevm equal metastage 103
jump promptdiskchar1 equal metastage 200
jump promptdiskchar2 equal metastage 201
jump promptprepareanyc equal metastage 202
set stage -1
jump loop always
promptdiskchar1:
set metastage 201
set stage 3
op add char 0x41 disk#A-Z
write char cell1 2
write 2 cell1 1
write 1 cell1 0
jump loop always
promptdiskchar2:
set metastage 202
set stage 3
write 0x3e cell1 2#>
write 2 cell1 1
write 1 cell1 0
jump loop always
promptprepareanyc:
set stage 3
set metastage 2
set bufptr 0
write 0 cell1 2
write 3 cell1 1
write 1 cell1 0
jump loop always
exeloadergetfile:#TODO:

exeloaderreadfile:#TODO:
exeloaderwritevm:#TODO:

stage3:
jump stage4 greaterThanEq stage 4
set stage 0
jump loop always
stage4:#stage4 is only used by the send args to process thingy
#send args to process packet
#6bytes of characters and high bits indicate the actually used length
#offset from start of args
set maxptr bufptr
set bufptr 0
findfirstspace:
read val bank1 bufptr
op add bufptr bufptr 1
jump foundarg equal val 0x20
jump findfirstspace lessThan bufptr maxptr
#MAKE SURE WE SEND A DUMMY REQUEST
write 0 cell1 2
write 0 cell1 3
write spawnedpid cell1 1
write 1 cell1 0
set metastage 100#just wait for the termination of the task
set stage 3
jump loop always
foundarg:
set sentindex 0
set batchaccumed 0
set packedargs 0
accumingargs:
read tmpval bank1 bufptr
op shl packedargs packedargs 8
op or packedargs packedargs tmpval
op add batchaccumed batchaccumed 1
jump notenoughargsaccumed lessThan batchaccumed 6
op shl batchaccumed batchaccumed 48
op or packedargs packedargs batchaccumed
set batchaccumed 0
write packedargs cell1 2
write sentindex cell1 3
write spawnedpid cell1 1
write 1 cell1 0
op add sentindex sentindex 6
set packedargs 0
waitforaccumedargssent:
read tmpval cell1 0
jump waitforaccumedargssent notEqual tmpval -5
notenoughargsaccumed:
op add bufptr bufptr 1
jump accumingargs lessThan bufptr maxptr
#send the remaining args
op shr packedargs packedargs 8#do i need this to make it work again?
op shl batchaccumed batchaccumed 48
op or packedargs packedargs batchaccumed
write packedargs cell1 2
write sentindex cell1 3
write spawnedpid cell1 1
write 1 cell1 0
set metastage 100#just wait for the termination of the task
set stage 3
jump loop always
handleinit:
set stage 2
set metastage 200
write 6 cell1 0
jump loop always
handleanyc:
set stage 3
read resp cell1 4
jump handlenoc equal resp 0
set metastage 3
write 1 cell1 2
write 3 cell1 1
write 1 cell1 0
jump loop always
handlenoc:
write 0 cell1 2
write 3 cell1 1
write 1 cell1 0
jump loop always
handlechar:
set stage 3
set metastage 4
read val cell1 4
#store val in buffer
write val bank1 bufptr
op add bufptr bufptr 1
op mod bufptr bufptr 511
op add bufptr bufptr 511
op mod bufptr bufptr 511#modulo of the truth
write bufptr bank1 511
#stored val in buffer
write val cell1 2
write 2 cell1 1
write 1 cell1 0
jump loop always
handletermd:
set stage 3
set metastage 2
op sub bufptr bufptr 1#what if we are at 0 though
op mod bufptr bufptr 511
op add bufptr bufptr 511
op mod bufptr bufptr 511#modulo of the truth to see the last thing
read val bank1 bufptr
op add bufptr bufptr 1
op mod bufptr bufptr 511
op add bufptr bufptr 511
op mod bufptr bufptr 511#modulo of the truth
jump handletermdhandlecmd equal val 0x0a
write 0 cell1 2
write 3 cell1 1
write 1 cell1 0
jump loop always
handletermdhandlecmd:
#ok filespec is going to be a bit of an issue
#ok fine * is pretty easy just pad with ?(no trailing chars after * but wharever)
#but i'm going to have to make an fs wrapper that understands ?
#so uhhh good luck to future me
#this fs wrapper should live somewhere here
#what if i just don't for now
#and DIR is argumentless for now
#REN should be fine even without the special focus pocus wrapper


#built ins:
#DIR <filespec>
#ERA <filespec>
#REN <new> = <old>
#ok so fsd doesn't have a rename syscall but i can conjure something up by copying everything
#SAVE <pages> <file> unimpl!
#TYPE <filename>
#USER <area> unimpl!
#<drive-letter>: to change to that drive(unimpl!)
#ED <filename>?????(creates file if it doesn't exist)
#ok i would need to think up of something
#uhhh

#ok so drive letter is going to be fun
#ok so ccp could spawn all those drives
#or maybe the fs wrapper?
#there is a main fs spawned by init and additional drives B-Z spawned by fs wrapper
#no fs wrapper yet so



#exe format:
#VM/NT for vm and native respectively
#native still has a vm just in case
#native exes must at least include a vm stub that writes a message like "executing <program> using vm is not supported!\n" and send a task end packet to the ccp!!!!!!!!
#12 bytes with process id if NT
#32-bit little-endian how many instructions
#32-bit little-endian integers to store into vm(yes, ints)
#you can include trailing junk data that will be ignored to store some data in the binary
#please expect messages from the ccp with your args after you spawn
#TODO:DO STUFF
set check "4DIR |4DIR\n|4ERA |4ERA\n|4REN |4REN\n|5TYPE |5TYPE\n|3ED |3ED\n|"
set cmdc 4
set cmdi 0
set i 0
sensor checklen check @size
handletermdhandlecmdoutloop:
read len check i
op sub len len 0x30#ascii digit
op add i i 1
set cpi 0
handletermdhandlecmdinloop:
read val1 bank1 cpi
read val2 check i
op lessThanEq tmp1 val1 0x7a
op greaterThanEq tmp2 val1 0x61
op and tmp1 tmp1 tmp2
op mul tmp1 tmp1 0x20
op xor tmp1 tmp1 0x7f
op and val1 val1 tmp1
op add cpi cpi 1
op add i i 1
jump handletermdhandlecmdskiploop notEqual val1 val2
jump handletermdhandlecmdinloop lessThan i len
#found command
jump handletermdfoundvalidcmd always
handletermdhandlecmdskiploop:
read val2 check i
jump handletermdskipskiploop equal val2 0x7C
op add i i 1
jump handletermdhandlecmdskiploop lessThan i checklen
handletermdskipskiploop:
op add i i 1
op add cmdi cmdi 1
jump handletermdhandlecmdoutloop lessThan cmdi cmdc
#this is an external cmd now
set stage 3
set metastage 200
write 0x0a cell1 2#send newline
write 2 cell1 1
write 1 cell1 0
set bufptr 0#clean up because external cmds are not real yet
write bufptr bank1 511
jump loop always
handletermdfoundvalidcmd:
#cmdi is the cmd i
op mul off cmdi 3
op add @counter @counter off
set applo 0x0
set apphi 0x444952
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x444952
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x455241
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x455241
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x52454e
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x52454e
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x54595045
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x54595045
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x4544
jump handletermdfoundvalidcmdgotname always
set applo 0x0
set apphi 0x4544
jump handletermdfoundvalidcmdgotname always
handletermdfoundvalidcmdgotname:
set metastage 101
set stage 4
write applo cell1 1
write apphi cell1 2
write 4 cell1 0
waitforbuiltinappspawned:
read tmpval cell1 0
jump waitforbuiltinappspawned greaterThanEq tmpval 0
read spawnedpid cell1 1
#set bufptr 0#clean up
#write bufptr bank1 511
jump loop always
handlewaitfortaskend:#on task end a packet should be sent to the ccp(pid 1)
set stage 2
set metastage 200
write 6 cell1 0
jump loop always
nomoreipc:
set stage 0
write 0 cell1 63
jump loop always
code:
jump loop notEqual stage 0
read ipcin cell1 63
jump handleipcin notEqual ipcin 0
jump loop always
handleipcin:
write -1 cell1 1
write 2 cell1 0
set stage 1
jump loop always
error:
write 0 cell1 0
jump loop always